#!/bin/bash

# Portfolio Validation Script
# Valida HTML, CSS y ejecuta auditor√≠as de accesibilidad

echo "üîç Iniciando validaci√≥n del portfolio de Marc R√†fols..."

# Colores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# Funci√≥n para mostrar resultados
show_result() {
    if [ $1 -eq 0 ]; then
        echo -e "${GREEN}‚úÖ $2${NC}"
    else
        echo -e "${RED}‚ùå $2${NC}"
    fi
}

# 1. Validar HTML
echo -e "\n${YELLOW}üìù Validando estructura HTML...${NC}"

# Verificar que los archivos HTML existen
files=("index.html" "experience.html" "contact.html")
for file in "${files[@]}"; do
    if [ -f "$file" ]; then
        echo "‚úì $file encontrado"
        
        # Verificar estructura b√°sica
        if grep -q "<!DOCTYPE html>" "$file" 2>/dev/null; then
            echo "  ‚úì DOCTYPE HTML5 presente"
        else
            echo "  ‚ö†Ô∏è  DOCTYPE HTML5 faltante en $file"
        fi
        
        # Verificar meta viewport
        if grep -q "viewport" "$file"; then
            echo "  ‚úì Meta viewport presente"
        else
            echo "  ‚ö†Ô∏è  Meta viewport faltante en $file"
        fi
        
        # Verificar lang attribute
        if grep -q 'lang="' "$file"; then
            echo "  ‚úì Atributo lang presente"
        else
            echo "  ‚ö†Ô∏è  Atributo lang faltante en $file"
        fi
        
    else
        echo "‚ùå $file no encontrado"
    fi
done

# 2. Validar JavaScript
echo -e "\n${YELLOW}üîß Validando JavaScript...${NC}"

if [ -f "assets/js/language.js" ]; then
    echo "‚úì language.js encontrado"
    
    # Verificar funciones principales
    if grep -q "function translatePage" "assets/js/language.js"; then
        echo "  ‚úì Funci√≥n translatePage presente"
    fi
    
    if grep -q "try {" "assets/js/language.js"; then
        echo "  ‚úì Gesti√≥n de errores implementada"
    fi
    
    if grep -q "console.error" "assets/js/language.js"; then
        echo "  ‚úì Logging de errores implementado"
    fi
else
    echo "‚ùå assets/js/language.js no encontrado"
fi

# 3. Verificar accesibilidad b√°sica
echo -e "\n${YELLOW}‚ôø Verificando accesibilidad b√°sica...${NC}"

for file in "${files[@]}"; do
    if [ -f "$file" ]; then
        echo "Verificando $file:"
        
        # Verificar alt attributes
        img_count=$(grep -c "<img" "$file" 2>/dev/null || echo "0")
        alt_count=$(grep -c "alt=" "$file" 2>/dev/null || echo "0")
        
        if [ "$img_count" -eq "$alt_count" ] || [ "$img_count" -eq 0 ]; then
            echo "  ‚úì Todas las im√°genes tienen alt text"
        else
            echo "  ‚ö†Ô∏è  Algunas im√°genes pueden carecer de alt text"
        fi
        
        # Verificar headings hierarchy
        if grep -q "<h1" "$file"; then
            echo "  ‚úì H1 presente"
        else
            echo "  ‚ö†Ô∏è  H1 faltante en $file"
        fi
        
        # Verificar aria labels
        if grep -q "aria-" "$file"; then
            echo "  ‚úì Atributos ARIA implementados"
        else
            echo "  ‚ö†Ô∏è  Atributos ARIA no encontrados en $file"
        fi
        
        # Verificar skip links
        if grep -q "skip-link" "$file"; then
            echo "  ‚úì Skip link implementado"
        else
            echo "  ‚ö†Ô∏è  Skip link faltante en $file"
        fi
    fi
done

# 4. Verificar SEO b√°sico
echo -e "\n${YELLOW}üîç Verificando SEO b√°sico...${NC}"

for file in "${files[@]}"; do
    if [ -f "$file" ]; then
        echo "Verificando $file:"
        
        # Title tag
        if grep -q "<title>" "$file"; then
            echo "  ‚úì Title tag presente"
        else
            echo "  ‚ùå Title tag faltante"
        fi
        
        # Meta description
        if grep -q 'name="description"' "$file"; then
            echo "  ‚úì Meta description presente"
        else
            echo "  ‚ùå Meta description faltante"
        fi
        
        # Meta keywords
        if grep -q 'name="keywords"' "$file"; then
            echo "  ‚úì Meta keywords presente"
        else
            echo "  ‚ö†Ô∏è  Meta keywords faltante"
        fi
        
        # Open Graph
        if grep -q 'property="og:' "$file"; then
            echo "  ‚úì Open Graph tags presentes"
        else
            echo "  ‚ö†Ô∏è  Open Graph tags faltantes"
        fi
    fi
done

# 5. Verificar rendimiento b√°sico
echo -e "\n${YELLOW}‚ö° Verificando optimizaciones de rendimiento...${NC}"

for file in "${files[@]}"; do
    if [ -f "$file" ]; then
        echo "Verificando $file:"
        
        # Preload tags
        if grep -q "rel=\"preload\"" "$file"; then
            echo "  ‚úì Preload tags implementados"
        else
            echo "  ‚ö†Ô∏è  Preload tags no encontrados"
        fi
        
        # Lazy loading
        if grep -q "loading=\"lazy\"" "$file"; then
            echo "  ‚úì Lazy loading implementado"
        else
            echo "  ‚ö†Ô∏è  Lazy loading no encontrado"
        fi
        
        # External resources optimization
        cdn_count=$(grep -c "cdn\." "$file" 2>/dev/null || echo "0")
        echo "  üìä Recursos CDN utilizados: $cdn_count"
    fi
done

# 6. Verificar estructura de archivos
echo -e "\n${YELLOW}üìÅ Verificando estructura de archivos...${NC}"

required_dirs=("assets" "assets/css" "assets/js" "assets/img")
for dir in "${required_dirs[@]}"; do
    if [ -d "$dir" ]; then
        echo "‚úì Directorio $dir existe"
    else
        echo "‚ùå Directorio $dir faltante"
    fi
done

required_files=("assets/css/style.css" "assets/js/language.js" "assets/js/main.js")
for req_file in "${required_files[@]}"; do
    if [ -f "$req_file" ]; then
        echo "‚úì Archivo $req_file existe"
    else
        echo "‚ùå Archivo $req_file faltante"
    fi
done

# 7. Resumen final
echo -e "\n${GREEN}üìã RESUMEN DE VALIDACI√ìN${NC}"
echo "=================================="
echo "‚úÖ Validaci√≥n HTML completada"
echo "‚úÖ Verificaci√≥n de accesibilidad completada"
echo "‚úÖ Auditor√≠a SEO b√°sica completada"
echo "‚úÖ Verificaci√≥n de rendimiento completada"
echo -e "\n${YELLOW}üí° Para una auditor√≠a completa, ejecuta:${NC}"
echo "  - Lighthouse en Chrome DevTools"
echo "  - WAVE Web Accessibility Evaluator"
echo "  - HTML Validator (validator.w3.org)"
echo -e "\n${GREEN}üéâ Validaci√≥n del portfolio completada!${NC}"
